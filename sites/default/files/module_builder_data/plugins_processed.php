a:46:{s:6:"action";a:8:{s:7:"type_id";s:6:"action";s:10:"type_label";s:6:"action";s:10:"service_id";s:21:"plugin.manager.action";s:6:"subdir";s:13:"Plugin/Action";s:16:"plugin_interface";s:34:"Drupal\Core\Action\ActionInterface";s:33:"plugin_definition_annotation_name";s:29:"Drupal\Core\Annotation\Action";s:24:"plugin_interface_methods";a:5:{s:15:"executeMultiple";a:3:{s:4:"name";s:15:"executeMultiple";s:11:"declaration";s:48:"public function executeMultiple(array $objects);";s:11:"description";s:44:"Executes the plugin for an array of objects.";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:93:"public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE);";s:11:"description";s:21:"Checks object access.";}s:7:"execute";a:3:{s:4:"name";s:7:"execute";s:11:"declaration";s:26:"public function execute();";s:11:"description";s:20:"Executes the plugin.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}}s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:45:"The human-readable name of the action plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:23:"confirm_form_route_name";a:3:{s:4:"name";s:23:"confirm_form_route_name";s:11:"description";s:55:"The route name for a confirmation form for this action.";s:4:"type";s:17:"string (optional)";}s:4:"type";a:3:{s:4:"name";s:4:"type";s:11:"description";s:40:"The entity type the action can apply to.";s:4:"type";s:6:"string";}s:8:"category";a:3:{s:4:"name";s:8:"category";s:11:"description";s:63:"The category under which the action should be listed in the UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}}s:8:"archiver";a:8:{s:7:"type_id";s:8:"archiver";s:10:"type_label";s:8:"archiver";s:10:"service_id";s:23:"plugin.manager.archiver";s:6:"subdir";s:15:"Plugin/Archiver";s:16:"plugin_interface";s:38:"Drupal\Core\Archiver\ArchiverInterface";s:33:"plugin_definition_annotation_name";s:40:"Drupal\Core\Archiver\Annotation\Archiver";s:24:"plugin_interface_methods";a:4:{s:3:"add";a:3:{s:4:"name";s:3:"add";s:11:"declaration";s:32:"public function add($file_path);";s:11:"description";s:52:"Adds the specified file or directory to the archive.";}s:6:"remove";a:3:{s:4:"name";s:6:"remove";s:11:"declaration";s:30:"public function remove($path);";s:11:"description";s:44:"Removes the specified file from the archive.";}s:7:"extract";a:3:{s:4:"name";s:7:"extract";s:11:"declaration";s:55:"public function extract($path, array $files = array());";s:11:"description";s:61:"Extracts multiple files in the archive to the specified path.";}s:12:"listContents";a:3:{s:4:"name";s:12:"listContents";s:11:"declaration";s:31:"public function listContents();";s:11:"description";s:31:"Lists all files in the archive.";}}s:17:"plugin_properties";a:4:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The archiver plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:47:"The human-readable name of the archiver plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:39:"The description of the archiver plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:10:"extensions";a:3:{s:4:"name";s:10:"extensions";s:11:"description";s:47:"An array of valid extensions for this archiver.";s:4:"type";s:5:"array";}}}s:5:"block";a:8:{s:7:"type_id";s:5:"block";s:10:"type_label";s:5:"block";s:10:"service_id";s:20:"plugin.manager.block";s:6:"subdir";s:12:"Plugin/Block";s:16:"plugin_interface";s:38:"Drupal\Core\Block\BlockPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\Core\Block\Annotation\Block";s:24:"plugin_interface_methods";a:22:{s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"declaration";s:24:"public function label();";s:11:"description";s:36:"Returns the user-facing block label.";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:77:"public function access(AccountInterface $account, $return_as_object = FALSE);";s:11:"description";s:44:"Indicates whether the block should be shown.";}s:5:"build";a:3:{s:4:"name";s:5:"build";s:11:"declaration";s:24:"public function build();";s:11:"description";s:62:"Builds and returns the renderable array for this block plugin.";}s:21:"setConfigurationValue";a:3:{s:4:"name";s:21:"setConfigurationValue";s:11:"declaration";s:52:"public function setConfigurationValue($key, $value);";s:11:"description";s:46:"Sets a particular value in the block settings.";}s:9:"blockForm";a:3:{s:4:"name";s:9:"blockForm";s:11:"declaration";s:65:"public function blockForm($form, FormStateInterface $form_state);";s:11:"description";s:70:"Returns the configuration form elements specific to this block plugin.";}s:13:"blockValidate";a:3:{s:4:"name";s:13:"blockValidate";s:11:"declaration";s:69:"public function blockValidate($form, FormStateInterface $form_state);";s:11:"description";s:55:"Adds block type-specific validation for the block form.";}s:11:"blockSubmit";a:3:{s:4:"name";s:11:"blockSubmit";s:11:"declaration";s:67:"public function blockSubmit($form, FormStateInterface $form_state);";s:11:"description";s:64:"Adds block type-specific submission handling for the block form.";}s:24:"getMachineNameSuggestion";a:3:{s:4:"name";s:24:"getMachineNameSuggestion";s:11:"declaration";s:43:"public function getMachineNameSuggestion();";s:11:"description";s:62:"Suggests a machine name to identify an instance of this block.";}s:16:"getConfiguration";a:3:{s:4:"name";s:16:"getConfiguration";s:11:"declaration";s:35:"public function getConfiguration();";s:11:"description";s:33:"Gets this plugin's configuration.";}s:16:"setConfiguration";a:3:{s:4:"name";s:16:"setConfiguration";s:11:"declaration";s:55:"public function setConfiguration(array $configuration);";s:11:"description";s:48:"Sets the configuration for this plugin instance.";}s:20:"defaultConfiguration";a:3:{s:4:"name";s:20:"defaultConfiguration";s:11:"declaration";s:39:"public function defaultConfiguration();";s:11:"description";s:43:"Gets default configuration for this plugin.";}s:21:"calculateDependencies";a:3:{s:4:"name";s:21:"calculateDependencies";s:11:"declaration";s:40:"public function calculateDependencies();";s:11:"description";s:50:"Calculates dependencies for the configured plugin.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:84:"public function buildConfigurationForm(array $form, FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:88:"public function validateConfigurationForm(array &$form, FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:86:"public function submitConfigurationForm(array &$form, FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:16:"getCacheContexts";a:3:{s:4:"name";s:16:"getCacheContexts";s:11:"declaration";s:35:"public function getCacheContexts();";s:11:"description";s:47:"The cache contexts associated with this object.";}s:12:"getCacheTags";a:3:{s:4:"name";s:12:"getCacheTags";s:11:"declaration";s:31:"public function getCacheTags();";s:11:"description";s:43:"The cache tags associated with this object.";}s:14:"getCacheMaxAge";a:3:{s:4:"name";s:14:"getCacheMaxAge";s:11:"declaration";s:33:"public function getCacheMaxAge();";s:11:"description";s:52:"The maximum age for which this object may be cached.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:11:"admin_label";a:3:{s:4:"name";s:11:"admin_label";s:11:"description";s:38:"The administrative label of the block.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:8:"category";a:3:{s:4:"name";s:8:"category";s:11:"description";s:60:"The category in the admin UI where the block will be listed.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}}s:15:"ckeditor.plugin";a:8:{s:7:"type_id";s:15:"ckeditor.plugin";s:10:"type_label";s:15:"ckeditor.plugin";s:10:"service_id";s:30:"plugin.manager.ckeditor.plugin";s:6:"subdir";s:21:"Plugin/CKEditorPlugin";s:16:"plugin_interface";s:39:"Drupal\ckeditor\CKEditorPluginInterface";s:33:"plugin_definition_annotation_name";s:41:"Drupal\ckeditor\Annotation\CKEditorPlugin";s:24:"plugin_interface_methods";a:7:{s:10:"isInternal";a:3:{s:4:"name";s:10:"isInternal";s:11:"declaration";s:29:"public function isInternal();";s:11:"description";s:65:"Indicates if this plugin is part of the optimized CKEditor build.";}s:15:"getDependencies";a:3:{s:4:"name";s:15:"getDependencies";s:11:"declaration";s:48:"public function getDependencies(Editor $editor);";s:11:"description";s:47:"Returns a list of plugins this plugin requires.";}s:12:"getLibraries";a:3:{s:4:"name";s:12:"getLibraries";s:11:"declaration";s:45:"public function getLibraries(Editor $editor);";s:11:"description";s:49:"Returns a list of libraries this plugin requires.";}s:7:"getFile";a:3:{s:4:"name";s:7:"getFile";s:11:"declaration";s:26:"public function getFile();";s:11:"description";s:73:"Returns the Drupal root-relative file path to the plugin JavaScript file.";}s:9:"getConfig";a:3:{s:4:"name";s:9:"getConfig";s:11:"declaration";s:42:"public function getConfig(Editor $editor);";s:11:"description";s:74:"Returns the additions to CKEDITOR.config for a specific CKEditor instance.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}}s:17:"plugin_properties";a:2:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:47:"The human-readable name of the CKEditor plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}}s:9:"condition";a:8:{s:7:"type_id";s:9:"condition";s:10:"type_label";s:9:"condition";s:10:"service_id";s:24:"plugin.manager.condition";s:6:"subdir";s:16:"Plugin/Condition";s:16:"plugin_interface";s:40:"Drupal\Core\Condition\ConditionInterface";s:33:"plugin_definition_annotation_name";s:42:"Drupal\Core\Condition\Annotation\Condition";s:24:"plugin_interface_methods";a:17:{s:9:"isNegated";a:3:{s:4:"name";s:9:"isNegated";s:11:"declaration";s:28:"public function isNegated();";s:11:"description";s:52:"Determines whether condition result will be negated.";}s:8:"evaluate";a:3:{s:4:"name";s:8:"evaluate";s:11:"declaration";s:27:"public function evaluate();";s:11:"description";s:62:"Evaluates the condition and returns TRUE or FALSE accordingly.";}s:7:"summary";a:3:{s:4:"name";s:7:"summary";s:11:"declaration";s:26:"public function summary();";s:11:"description";s:67:"Provides a human readable summary of the condition's configuration.";}s:20:"setExecutableManager";a:3:{s:4:"name";s:20:"setExecutableManager";s:11:"declaration";s:84:"public function setExecutableManager(ExecutableManagerInterface $executableManager);";s:11:"description";s:34:"Sets the executable manager class.";}s:7:"execute";a:3:{s:4:"name";s:7:"execute";s:11:"declaration";s:26:"public function execute();";s:11:"description";s:20:"Executes the plugin.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:84:"public function buildConfigurationForm(array $form, FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:88:"public function validateConfigurationForm(array &$form, FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:86:"public function submitConfigurationForm(array &$form, FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}s:16:"getConfiguration";a:3:{s:4:"name";s:16:"getConfiguration";s:11:"declaration";s:35:"public function getConfiguration();";s:11:"description";s:33:"Gets this plugin's configuration.";}s:16:"setConfiguration";a:3:{s:4:"name";s:16:"setConfiguration";s:11:"declaration";s:55:"public function setConfiguration(array $configuration);";s:11:"description";s:48:"Sets the configuration for this plugin instance.";}s:20:"defaultConfiguration";a:3:{s:4:"name";s:20:"defaultConfiguration";s:11:"declaration";s:39:"public function defaultConfiguration();";s:11:"description";s:43:"Gets default configuration for this plugin.";}s:21:"calculateDependencies";a:3:{s:4:"name";s:21:"calculateDependencies";s:11:"declaration";s:40:"public function calculateDependencies();";s:11:"description";s:50:"Calculates dependencies for the configured plugin.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:16:"getCacheContexts";a:3:{s:4:"name";s:16:"getCacheContexts";s:11:"declaration";s:35:"public function getCacheContexts();";s:11:"description";s:47:"The cache contexts associated with this object.";}s:12:"getCacheTags";a:3:{s:4:"name";s:12:"getCacheTags";s:11:"declaration";s:31:"public function getCacheTags();";s:11:"description";s:43:"The cache tags associated with this object.";}s:14:"getCacheMaxAge";a:3:{s:4:"name";s:14:"getCacheMaxAge";s:11:"declaration";s:33:"public function getCacheMaxAge();";s:11:"description";s:52:"The maximum age for which this object may be cached.";}}s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:24:"The condition plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:41:"The human-readable name of the condition.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:6:"module";a:3:{s:4:"name";s:6:"module";s:11:"description";s:42:"The name of the module providing the type.";s:4:"type";s:6:"string";}s:7:"context";a:3:{s:4:"name";s:7:"context";s:11:"description";s:74:"An array of context definitions describing the context used by the plugin.";s:4:"type";s:43:"\Drupal\Core\Annotation\ContextDefinition[]";}s:8:"category";a:3:{s:4:"name";s:8:"category";s:11:"description";s:63:"The category under which the condition should listed in the UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}}s:19:"ctools.relationship";a:8:{s:7:"type_id";s:19:"ctools.relationship";s:10:"type_label";s:19:"ctools.relationship";s:10:"service_id";s:34:"plugin.manager.ctools.relationship";s:6:"subdir";s:19:"Plugin/Relationship";s:16:"plugin_interface";s:42:"Drupal\ctools\Plugin\RelationshipInterface";s:33:"plugin_definition_annotation_name";s:37:"Drupal\ctools\Annotation\Relationship";s:24:"plugin_interface_methods";a:17:{s:15:"getRelationship";a:3:{s:4:"name";s:15:"getRelationship";s:11:"declaration";s:34:"public function getRelationship();";s:11:"description";s:57:"Generates a context based on this plugin's configuration.";}s:7:"getName";a:3:{s:4:"name";s:7:"getName";s:11:"declaration";s:26:"public function getName();";s:11:"description";s:55:"The name of the property used to get this relationship.";}s:21:"getContextDefinitions";a:3:{s:4:"name";s:21:"getContextDefinitions";s:11:"declaration";s:40:"public function getContextDefinitions();";s:11:"description";s:43:"Gets the context definitions of the plugin.";}s:20:"getContextDefinition";a:3:{s:4:"name";s:20:"getContextDefinition";s:11:"declaration";s:44:"public function getContextDefinition($name);";s:11:"description";s:49:"Gets a specific context definition of the plugin.";}s:11:"getContexts";a:3:{s:4:"name";s:11:"getContexts";s:11:"declaration";s:30:"public function getContexts();";s:11:"description";s:26:"Gets the defined contexts.";}s:10:"getContext";a:3:{s:4:"name";s:10:"getContext";s:11:"declaration";s:34:"public function getContext($name);";s:11:"description";s:23:"Gets a defined context.";}s:16:"getContextValues";a:3:{s:4:"name";s:16:"getContextValues";s:11:"declaration";s:35:"public function getContextValues();";s:11:"description";s:41:"Gets the values for all defined contexts.";}s:15:"getContextValue";a:3:{s:4:"name";s:15:"getContextValue";s:11:"declaration";s:39:"public function getContextValue($name);";s:11:"description";s:37:"Gets the value for a defined context.";}s:10:"setContext";a:3:{s:4:"name";s:10:"setContext";s:11:"declaration";s:61:"public function setContext($name, ContextInterface $context);";s:11:"description";s:29:"Set a context on this plugin.";}s:15:"setContextValue";a:3:{s:4:"name";s:15:"setContextValue";s:11:"declaration";s:47:"public function setContextValue($name, $value);";s:11:"description";s:37:"Sets the value for a defined context.";}s:16:"validateContexts";a:3:{s:4:"name";s:16:"validateContexts";s:11:"declaration";s:35:"public function validateContexts();";s:11:"description";s:50:"Validates the set values for the defined contexts.";}s:17:"getContextMapping";a:3:{s:4:"name";s:17:"getContextMapping";s:11:"declaration";s:36:"public function getContextMapping();";s:11:"description";s:71:"Gets a mapping of the expected assignment names to their context names.";}s:17:"setContextMapping";a:3:{s:4:"name";s:17:"setContextMapping";s:11:"declaration";s:58:"public function setContextMapping(array $context_mapping);";s:11:"description";s:71:"Sets a mapping of the expected assignment names to their context names.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:24:"The label of the plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:9:"data_type";a:3:{s:4:"name";s:9:"data_type";s:11:"description";s:43:"The returned data type of this relationship";s:4:"type";s:6:"string";}s:13:"property_name";a:3:{s:4:"name";s:13:"property_name";s:11:"description";s:65:"The name of the property from which this relationship is derived.";s:4:"type";s:6:"string";}s:7:"context";a:3:{s:4:"name";s:7:"context";s:11:"description";s:59:"The array of contexts requires or optional for this plugin.";s:4:"type";s:46:"\Drupal\Core\Plugin\Context\ContextInterface[]";}}}s:12:"devel_dumper";a:8:{s:7:"type_id";s:12:"devel_dumper";s:10:"type_label";s:12:"devel_dumper";s:10:"service_id";s:27:"plugin.manager.devel_dumper";s:6:"subdir";s:19:"Plugin/Devel/Dumper";s:16:"plugin_interface";s:33:"Drupal\devel\DevelDumperInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\devel\Annotation\DevelDumper";s:24:"plugin_interface_methods";a:4:{s:4:"dump";a:3:{s:4:"name";s:4:"dump";s:11:"declaration";s:43:"public function dump($input, $name = NULL);";s:11:"description";s:35:"Dumps information about a variable.";}s:6:"export";a:3:{s:4:"name";s:6:"export";s:11:"declaration";s:45:"public function export($input, $name = NULL);";s:11:"description";s:46:"Returns a string representation of a variable.";}s:18:"exportAsRenderable";a:3:{s:4:"name";s:18:"exportAsRenderable";s:11:"declaration";s:57:"public function exportAsRenderable($input, $name = NULL);";s:11:"description";s:72:"Returns a string representation of a variable wrapped in a render array.";}s:17:"checkRequirements";a:3:{s:4:"name";s:17:"checkRequirements";s:11:"declaration";s:43:"public static function checkRequirements();";s:11:"description";s:53:"Checks if requirements for this plugin are satisfied.";}}s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:48:"The human-readable name of the DevelDumper type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:44:"A short description of the DevelDumper type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}}s:13:"develgenerate";a:8:{s:7:"type_id";s:13:"develgenerate";s:10:"type_label";s:13:"develgenerate";s:10:"service_id";s:28:"plugin.manager.develgenerate";s:6:"subdir";s:20:"Plugin/DevelGenerate";s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";s:46:"Drupal\devel_generate\Annotation\DevelGenerate";s:24:"plugin_interface_methods";a:0:{}s:17:"plugin_properties";a:8:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:50:"The human-readable name of the DevelGenerate type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:46:"A short description of the DevelGenerate type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:3:"url";a:3:{s:4:"name";s:3:"url";s:11:"description";s:41:"A url to access the plugin settings form.";s:4:"type";s:6:"string";}s:10:"permission";a:3:{s:4:"name";s:10:"permission";s:11:"description";s:59:"The permission required to access the plugin settings form.";s:4:"type";s:6:"string";}s:5:"class";a:3:{s:4:"name";s:5:"class";s:11:"description";s:36:"The name of the DevelGenerate class.";s:4:"type";s:6:"string";}s:8:"settings";a:3:{s:4:"name";s:8:"settings";s:11:"description";s:66:"An array whose keys are the names of the settings available to the";s:4:"type";s:5:"array";}s:13:"drushSettings";a:3:{s:4:"name";s:13:"drushSettings";s:11:"description";s:53:"An array whose keys are the settings available to the";s:4:"type";s:5:"array";}}}s:15:"display_variant";a:8:{s:7:"type_id";s:15:"display_variant";s:10:"type_label";s:15:"display_variant";s:10:"service_id";s:30:"plugin.manager.display_variant";s:6:"subdir";s:21:"Plugin/DisplayVariant";s:16:"plugin_interface";s:36:"Drupal\Core\Display\VariantInterface";s:33:"plugin_definition_annotation_name";s:45:"Drupal\Core\Display\Annotation\DisplayVariant";s:24:"plugin_interface_methods";a:23:{s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"declaration";s:24:"public function label();";s:11:"description";s:46:"Returns the user-facing display variant label.";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:29:"public function adminLabel();";s:11:"description";s:47:"Returns the admin-facing display variant label.";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"declaration";s:21:"public function id();";s:11:"description";s:46:"Returns the unique ID for the display variant.";}s:9:"getWeight";a:3:{s:4:"name";s:9:"getWeight";s:11:"declaration";s:28:"public function getWeight();";s:11:"description";s:42:"Returns the weight of the display variant.";}s:9:"setWeight";a:3:{s:4:"name";s:9:"setWeight";s:11:"declaration";s:35:"public function setWeight($weight);";s:11:"description";s:39:"Sets the weight of the display variant.";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:57:"public function access(AccountInterface $account = NULL);";s:11:"description";s:49:"Determines if this display variant is accessible.";}s:5:"build";a:3:{s:4:"name";s:5:"build";s:11:"declaration";s:24:"public function build();";s:11:"description";s:64:"Builds and returns the renderable array for the display variant.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:16:"getConfiguration";a:3:{s:4:"name";s:16:"getConfiguration";s:11:"declaration";s:35:"public function getConfiguration();";s:11:"description";s:33:"Gets this plugin's configuration.";}s:16:"setConfiguration";a:3:{s:4:"name";s:16:"setConfiguration";s:11:"declaration";s:55:"public function setConfiguration(array $configuration);";s:11:"description";s:48:"Sets the configuration for this plugin instance.";}s:20:"defaultConfiguration";a:3:{s:4:"name";s:20:"defaultConfiguration";s:11:"declaration";s:39:"public function defaultConfiguration();";s:11:"description";s:43:"Gets default configuration for this plugin.";}s:21:"calculateDependencies";a:3:{s:4:"name";s:21:"calculateDependencies";s:11:"declaration";s:40:"public function calculateDependencies();";s:11:"description";s:50:"Calculates dependencies for the configured plugin.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:84:"public function buildConfigurationForm(array $form, FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:88:"public function validateConfigurationForm(array &$form, FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:86:"public function submitConfigurationForm(array &$form, FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}s:16:"addCacheContexts";a:3:{s:4:"name";s:16:"addCacheContexts";s:11:"declaration";s:56:"public function addCacheContexts(array $cache_contexts);";s:11:"description";s:20:"Adds cache contexts.";}s:12:"addCacheTags";a:3:{s:4:"name";s:12:"addCacheTags";s:11:"declaration";s:48:"public function addCacheTags(array $cache_tags);";s:11:"description";s:16:"Adds cache tags.";}s:16:"mergeCacheMaxAge";a:3:{s:4:"name";s:16:"mergeCacheMaxAge";s:11:"declaration";s:43:"public function mergeCacheMaxAge($max_age);";s:11:"description";s:66:"Merges the maximum age (in seconds) with the existing maximum age.";}s:22:"addCacheableDependency";a:3:{s:4:"name";s:22:"addCacheableDependency";s:11:"declaration";s:54:"public function addCacheableDependency($other_object);";s:11:"description";s:65:"Adds a dependency on an object: merges its cacheability metadata.";}s:16:"getCacheContexts";a:3:{s:4:"name";s:16:"getCacheContexts";s:11:"declaration";s:35:"public function getCacheContexts();";s:11:"description";s:47:"The cache contexts associated with this object.";}s:12:"getCacheTags";a:3:{s:4:"name";s:12:"getCacheTags";s:11:"declaration";s:31:"public function getCacheTags();";s:11:"description";s:43:"The cache tags associated with this object.";}s:14:"getCacheMaxAge";a:3:{s:4:"name";s:14:"getCacheMaxAge";s:11:"declaration";s:33:"public function getCacheMaxAge();";s:11:"description";s:52:"The maximum age for which this object may be cached.";}}s:17:"plugin_properties";a:2:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:11:"admin_label";a:3:{s:4:"name";s:11:"admin_label";s:11:"description";s:25:"The administrative label.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}}s:6:"editor";a:8:{s:7:"type_id";s:6:"editor";s:10:"type_label";s:6:"editor";s:10:"service_id";s:21:"plugin.manager.editor";s:6:"subdir";s:13:"Plugin/Editor";s:16:"plugin_interface";s:42:"Drupal\editor\Plugin\EditorPluginInterface";s:33:"plugin_definition_annotation_name";s:31:"Drupal\editor\Annotation\Editor";s:24:"plugin_interface_methods";a:8:{s:18:"getDefaultSettings";a:3:{s:4:"name";s:18:"getDefaultSettings";s:11:"declaration";s:37:"public function getDefaultSettings();";s:11:"description";s:63:"Returns the default settings for this configurable text editor.";}s:12:"settingsForm";a:3:{s:4:"name";s:12:"settingsForm";s:11:"declaration";s:90:"public function settingsForm(array $form, FormStateInterface $form_state, Editor $editor);";s:11:"description";s:54:"Returns a settings form to configure this text editor.";}s:20:"settingsFormValidate";a:3:{s:4:"name";s:20:"settingsFormValidate";s:11:"declaration";s:82:"public function settingsFormValidate(array $form, FormStateInterface $form_state);";s:11:"description";s:42:"Validates the settings form for an editor.";}s:18:"settingsFormSubmit";a:3:{s:4:"name";s:18:"settingsFormSubmit";s:11:"declaration";s:80:"public function settingsFormSubmit(array $form, FormStateInterface $form_state);";s:11:"description";s:65:"Modifies any values in the form state to prepare them for saving.";}s:13:"getJSSettings";a:3:{s:4:"name";s:13:"getJSSettings";s:11:"declaration";s:46:"public function getJSSettings(Editor $editor);";s:11:"description";s:43:"Returns JavaScript settings to be attached.";}s:12:"getLibraries";a:3:{s:4:"name";s:12:"getLibraries";s:11:"declaration";s:45:"public function getLibraries(Editor $editor);";s:11:"description";s:33:"Returns libraries to be attached.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}}s:17:"plugin_properties";a:6:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:45:"The human-readable name of the editor plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:26:"supports_content_filtering";a:3:{s:4:"name";s:26:"supports_content_filtering";s:11:"description";s:61:"Whether the editor supports "allowed content only" filtering.";s:4:"type";s:4:"bool";}s:23:"supports_inline_editing";a:3:{s:4:"name";s:23:"supports_inline_editing";s:11:"description";s:75:"Whether the editor supports the inline editing provided by the Edit module.";s:4:"type";s:4:"bool";}s:11:"is_xss_safe";a:3:{s:4:"name";s:11:"is_xss_safe";s:11:"description";s:58:"Whether this text editor is not vulnerable to XSS attacks.";s:4:"type";s:4:"bool";}s:23:"supported_element_types";a:3:{s:4:"name";s:23:"supported_element_types";s:11:"description";s:50:"A list of element types this text editor supports.";s:4:"type";s:8:"string[]";}}}s:12:"element_info";a:8:{s:7:"type_id";s:12:"element_info";s:10:"type_label";s:12:"element_info";s:10:"service_id";s:27:"plugin.manager.element_info";s:6:"subdir";s:7:"Element";s:16:"plugin_interface";s:43:"Drupal\Core\Render\Element\ElementInterface";s:33:"plugin_definition_annotation_name";s:43:"Drupal\Core\Render\Annotation\RenderElement";s:24:"plugin_interface_methods";a:4:{s:7:"getInfo";a:3:{s:4:"name";s:7:"getInfo";s:11:"declaration";s:26:"public function getInfo();";s:11:"description";s:48:"Returns the element properties for this element.";}s:13:"setAttributes";a:3:{s:4:"name";s:13:"setAttributes";s:11:"declaration";s:66:"public static function setAttributes(&$element, $class = array());";s:11:"description";s:38:"Sets a form element's class attribute.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}}s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}}s:26:"entity_reference_selection";a:8:{s:7:"type_id";s:26:"entity_reference_selection";s:10:"type_label";s:26:"entity_reference_selection";s:10:"service_id";s:41:"plugin.manager.entity_reference_selection";s:6:"subdir";s:31:"Plugin/EntityReferenceSelection";s:16:"plugin_interface";s:62:"Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface";s:33:"plugin_definition_annotation_name";s:54:"Drupal\Core\Entity\Annotation\EntityReferenceSelection";s:24:"plugin_interface_methods";a:7:{s:24:"getReferenceableEntities";a:3:{s:4:"name";s:24:"getReferenceableEntities";s:11:"declaration";s:98:"public function getReferenceableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0);";s:11:"description";s:40:"Gets the list of referenceable entities.";}s:26:"countReferenceableEntities";a:3:{s:4:"name";s:26:"countReferenceableEntities";s:11:"declaration";s:88:"public function countReferenceableEntities($match = NULL, $match_operator = 'CONTAINS');";s:11:"description";s:39:"Counts entities that are referenceable.";}s:29:"validateReferenceableEntities";a:3:{s:4:"name";s:29:"validateReferenceableEntities";s:11:"declaration";s:58:"public function validateReferenceableEntities(array $ids);";s:11:"description";s:52:"Validates which existing entities can be referenced.";}s:16:"entityQueryAlter";a:3:{s:4:"name";s:16:"entityQueryAlter";s:11:"declaration";s:57:"public function entityQueryAlter(SelectInterface $query);";s:11:"description";s:76:"Allows the selection to alter the SelectQuery generated by EntityFieldQuery.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:84:"public function buildConfigurationForm(array $form, FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:88:"public function validateConfigurationForm(array &$form, FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:86:"public function submitConfigurationForm(array &$form, FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}}s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:48:"The human-readable name of the selection plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"group";a:3:{s:4:"name";s:5:"group";s:11:"description";s:27:"The selection plugin group.";s:4:"type";s:6:"string";}s:12:"entity_types";a:3:{s:4:"name";s:12:"entity_types";s:11:"description";s:75:"An array of entity types that can be referenced by this plugin. Defaults to";s:4:"type";s:16:"array (optional)";}s:6:"weight";a:3:{s:4:"name";s:6:"weight";s:11:"description";s:39:"The weight of the plugin in it's group.";s:4:"type";s:3:"int";}}}s:16:"field.field_type";a:8:{s:7:"type_id";s:16:"field.field_type";s:10:"type_label";s:16:"field.field_type";s:10:"service_id";s:31:"plugin.manager.field.field_type";s:6:"subdir";s:22:"Plugin/Field/FieldType";s:16:"plugin_interface";s:36:"Drupal\Core\Field\FieldItemInterface";s:33:"plugin_definition_annotation_name";s:38:"Drupal\Core\Field\Annotation\FieldType";s:24:"plugin_interface_methods";a:46:{s:19:"propertyDefinitions";a:3:{s:4:"name";s:19:"propertyDefinitions";s:11:"declaration";s:94:"public static function propertyDefinitions(FieldStorageDefinitionInterface $field_definition);";s:11:"description";s:30:"Defines field item properties.";}s:16:"mainPropertyName";a:3:{s:4:"name";s:16:"mainPropertyName";s:11:"declaration";s:42:"public static function mainPropertyName();";s:11:"description";s:46:"Returns the name of the main property, if any.";}s:6:"schema";a:3:{s:4:"name";s:6:"schema";s:11:"declaration";s:81:"public static function schema(FieldStorageDefinitionInterface $field_definition);";s:11:"description";s:33:"Returns the schema for the field.";}s:9:"getEntity";a:3:{s:4:"name";s:9:"getEntity";s:11:"declaration";s:28:"public function getEntity();";s:11:"description";s:38:"Gets the entity that field belongs to.";}s:11:"getLangcode";a:3:{s:4:"name";s:11:"getLangcode";s:11:"declaration";s:30:"public function getLangcode();";s:11:"description";s:57:"Gets the langcode of the field values held in the object.";}s:18:"getFieldDefinition";a:3:{s:4:"name";s:18:"getFieldDefinition";s:11:"declaration";s:37:"public function getFieldDefinition();";s:11:"description";s:26:"Gets the field definition.";}s:5:"__get";a:3:{s:4:"name";s:5:"__get";s:11:"declaration";s:38:"public function __get($property_name);";s:11:"description";s:36:"Magic method: Gets a property value.";}s:5:"__set";a:3:{s:4:"name";s:5:"__set";s:11:"declaration";s:46:"public function __set($property_name, $value);";s:11:"description";s:36:"Magic method: Sets a property value.";}s:7:"__isset";a:3:{s:4:"name";s:7:"__isset";s:11:"declaration";s:40:"public function __isset($property_name);";s:11:"description";s:51:"Magic method: Determines whether a property is set.";}s:7:"__unset";a:3:{s:4:"name";s:7:"__unset";s:11:"declaration";s:40:"public function __unset($property_name);";s:11:"description";s:32:"Magic method: Unsets a property.";}s:4:"view";a:3:{s:4:"name";s:4:"view";s:11:"declaration";s:49:"public function view($display_options = array());";s:11:"description";s:51:"Returns a renderable array for a single field item.";}s:7:"preSave";a:3:{s:4:"name";s:7:"preSave";s:11:"declaration";s:26:"public function preSave();";s:11:"description";s:49:"Defines custom presave behavior for field values.";}s:8:"postSave";a:3:{s:4:"name";s:8:"postSave";s:11:"declaration";s:34:"public function postSave($update);";s:11:"description";s:51:"Defines custom post-save behavior for field values.";}s:6:"delete";a:3:{s:4:"name";s:6:"delete";s:11:"declaration";s:25:"public function delete();";s:11:"description";s:48:"Defines custom delete behavior for field values.";}s:14:"deleteRevision";a:3:{s:4:"name";s:14:"deleteRevision";s:11:"declaration";s:33:"public function deleteRevision();";s:11:"description";s:57:"Defines custom revision delete behavior for field values.";}s:19:"generateSampleValue";a:3:{s:4:"name";s:19:"generateSampleValue";s:11:"declaration";s:87:"public static function generateSampleValue(FieldDefinitionInterface $field_definition);";s:11:"description";s:35:"Generates placeholder field values.";}s:22:"defaultStorageSettings";a:3:{s:4:"name";s:22:"defaultStorageSettings";s:11:"declaration";s:48:"public static function defaultStorageSettings();";s:11:"description";s:51:"Defines the storage-level settings for this plugin.";}s:20:"defaultFieldSettings";a:3:{s:4:"name";s:20:"defaultFieldSettings";s:11:"declaration";s:46:"public static function defaultFieldSettings();";s:11:"description";s:49:"Defines the field-level settings for this plugin.";}s:27:"storageSettingsToConfigData";a:3:{s:4:"name";s:27:"storageSettingsToConfigData";s:11:"declaration";s:68:"public static function storageSettingsToConfigData(array $settings);";s:11:"description";s:69:"Returns a settings array that can be stored as a configuration value.";}s:29:"storageSettingsFromConfigData";a:3:{s:4:"name";s:29:"storageSettingsFromConfigData";s:11:"declaration";s:70:"public static function storageSettingsFromConfigData(array $settings);";s:11:"description";s:70:"Returns a settings array in the field type's canonical representation.";}s:25:"fieldSettingsToConfigData";a:3:{s:4:"name";s:25:"fieldSettingsToConfigData";s:11:"declaration";s:66:"public static function fieldSettingsToConfigData(array $settings);";s:11:"description";s:69:"Returns a settings array that can be stored as a configuration value.";}s:27:"fieldSettingsFromConfigData";a:3:{s:4:"name";s:27:"fieldSettingsFromConfigData";s:11:"declaration";s:68:"public static function fieldSettingsFromConfigData(array $settings);";s:11:"description";s:70:"Returns a settings array in the field type's canonical representation.";}s:19:"storageSettingsForm";a:3:{s:4:"name";s:19:"storageSettingsForm";s:11:"declaration";s:93:"public function storageSettingsForm(array &$form, FormStateInterface $form_state, $has_data);";s:11:"description";s:46:"Returns a form for the storage-level settings.";}s:17:"fieldSettingsForm";a:3:{s:4:"name";s:17:"fieldSettingsForm";s:11:"declaration";s:79:"public function fieldSettingsForm(array $form, FormStateInterface $form_state);";s:11:"description";s:44:"Returns a form for the field-level settings.";}s:21:"calculateDependencies";a:3:{s:4:"name";s:21:"calculateDependencies";s:11:"declaration";s:89:"public static function calculateDependencies(FieldDefinitionInterface $field_definition);";s:11:"description";s:40:"Calculates dependencies for field items.";}s:28:"calculateStorageDependencies";a:3:{s:4:"name";s:28:"calculateStorageDependencies";s:11:"declaration";s:111:"public static function calculateStorageDependencies(FieldStorageDefinitionInterface $field_storage_definition);";s:11:"description";s:61:"Calculates dependencies for field items on the storage level.";}s:19:"onDependencyRemoval";a:3:{s:4:"name";s:19:"onDependencyRemoval";s:11:"declaration";s:108:"public static function onDependencyRemoval(FieldDefinitionInterface $field_definition, array $dependencies);";s:11:"description";s:66:"Informs the plugin that a dependency of the field will be deleted.";}s:17:"getDataDefinition";a:3:{s:4:"name";s:17:"getDataDefinition";s:11:"declaration";s:36:"public function getDataDefinition();";s:11:"description";s:25:"Gets the data definition.";}s:3:"get";a:3:{s:4:"name";s:3:"get";s:11:"declaration";s:36:"public function get($property_name);";s:11:"description";s:23:"Gets a property object.";}s:3:"set";a:3:{s:4:"name";s:3:"set";s:11:"declaration";s:60:"public function set($property_name, $value, $notify = TRUE);";s:11:"description";s:22:"Sets a property value.";}s:13:"getProperties";a:3:{s:4:"name";s:13:"getProperties";s:11:"declaration";s:57:"public function getProperties($include_computed = FALSE);";s:11:"description";s:34:"Gets an array of property objects.";}s:7:"toArray";a:3:{s:4:"name";s:7:"toArray";s:11:"declaration";s:26:"public function toArray();";s:11:"description";s:40:"Returns an array of all property values.";}s:7:"isEmpty";a:3:{s:4:"name";s:7:"isEmpty";s:11:"declaration";s:26:"public function isEmpty();";s:11:"description";s:47:"Determines whether the data structure is empty.";}s:8:"onChange";a:3:{s:4:"name";s:8:"onChange";s:11:"declaration";s:32:"public function onChange($name);";s:11:"description";s:45:"React to changes to a child property or item.";}s:14:"createInstance";a:3:{s:4:"name";s:14:"createInstance";s:11:"declaration";s:111:"public static function createInstance($definition, $name = NULL, TraversableTypedDataInterface $parent = NULL);";s:11:"description";s:63:"Constructs a TypedData object given its definition and context.";}s:8:"getValue";a:3:{s:4:"name";s:8:"getValue";s:11:"declaration";s:27:"public function getValue();";s:11:"description";s:20:"Gets the data value.";}s:8:"setValue";a:3:{s:4:"name";s:8:"setValue";s:11:"declaration";s:49:"public function setValue($value, $notify = TRUE);";s:11:"description";s:20:"Sets the data value.";}s:9:"getString";a:3:{s:4:"name";s:9:"getString";s:11:"declaration";s:28:"public function getString();";s:11:"description";s:44:"Returns a string representation of the data.";}s:14:"getConstraints";a:3:{s:4:"name";s:14:"getConstraints";s:11:"declaration";s:33:"public function getConstraints();";s:11:"description";s:38:"Gets a list of validation constraints.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:39:"Validates the currently set data value.";}s:17:"applyDefaultValue";a:3:{s:4:"name";s:17:"applyDefaultValue";s:11:"declaration";s:50:"public function applyDefaultValue($notify = TRUE);";s:11:"description";s:26:"Applies the default value.";}s:7:"getName";a:3:{s:4:"name";s:7:"getName";s:11:"declaration";s:26:"public function getName();";s:11:"description";s:39:"Returns the name of a property or item.";}s:9:"getParent";a:3:{s:4:"name";s:9:"getParent";s:11:"declaration";s:28:"public function getParent();";s:11:"description";s:70:"Returns the parent data structure; i.e. either complex data or a list.";}s:7:"getRoot";a:3:{s:4:"name";s:7:"getRoot";s:11:"declaration";s:26:"public function getRoot();";s:11:"description";s:40:"Returns the root of the typed data tree.";}s:15:"getPropertyPath";a:3:{s:4:"name";s:15:"getPropertyPath";s:11:"declaration";s:34:"public function getPropertyPath();";s:11:"description";s:38:"Returns the property path of the data.";}s:10:"setContext";a:3:{s:4:"name";s:10:"setContext";s:11:"declaration";s:87:"public function setContext($name = NULL, TraversableTypedDataInterface $parent = NULL);";s:11:"description";s:66:"Sets the context of a property or item via a context aware parent.";}}s:17:"plugin_properties";a:14:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:6:"module";a:3:{s:4:"name";s:6:"module";s:11:"description";s:55:"The name of the module providing the field type plugin.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:42:"The human-readable name of the field type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:54:"A short human readable description for the field type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:8:"category";a:3:{s:4:"name";s:8:"category";s:11:"description";s:67:"The category under which the field type should be listed in the UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:14:"default_widget";a:3:{s:4:"name";s:14:"default_widget";s:11:"description";s:56:"The plugin_id of the default widget for this field type.";s:4:"type";s:6:"string";}s:17:"default_formatter";a:3:{s:4:"name";s:17:"default_formatter";s:11:"description";s:59:"The plugin_id of the default formatter for this field type.";s:4:"type";s:6:"string";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:76:"A boolean stating that fields of this type cannot be created through the UI.";s:4:"type";s:4:"bool";}s:10:"list_class";a:2:{s:4:"name";s:10:"list_class";s:11:"description";s:13:"{@inheritdoc}";}s:16:"definition_class";a:3:{s:4:"name";s:16:"definition_class";s:11:"description";s:59:"The definition class to use for defining data of this type.";s:4:"type";s:6:"string";}s:21:"list_definition_class";a:3:{s:4:"name";s:21:"list_definition_class";s:11:"description";s:70:"The definition class to use for defining a list of items of this type.";s:4:"type";s:6:"string";}s:14:"primitive_type";a:3:{s:4:"name";s:14:"primitive_type";s:11:"description";s:59:"The pre-defined primitive type that this data type maps to.";s:4:"type";s:6:"string";}s:11:"constraints";a:3:{s:4:"name";s:11:"constraints";s:11:"description";s:49:"An array of validation constraints for this type.";s:4:"type";s:5:"array";}s:35:"unwrap_for_canonical_representation";a:3:{s:4:"name";s:35:"unwrap_for_canonical_representation";s:11:"description";s:72:"Whether the typed object wraps the canonical representation of the data.";s:4:"type";s:4:"bool";}}}s:15:"field.formatter";a:8:{s:7:"type_id";s:15:"field.formatter";s:10:"type_label";s:15:"field.formatter";s:10:"service_id";s:30:"plugin.manager.field.formatter";s:6:"subdir";s:27:"Plugin/Field/FieldFormatter";s:16:"plugin_interface";s:36:"Drupal\Core\Field\FormatterInterface";s:33:"plugin_definition_annotation_name";s:43:"Drupal\Core\Field\Annotation\FieldFormatter";s:24:"plugin_interface_methods";a:19:{s:12:"settingsForm";a:3:{s:4:"name";s:12:"settingsForm";s:11:"declaration";s:74:"public function settingsForm(array $form, FormStateInterface $form_state);";s:11:"description";s:55:"Returns a form to configure settings for the formatter.";}s:15:"settingsSummary";a:3:{s:4:"name";s:15:"settingsSummary";s:11:"declaration";s:34:"public function settingsSummary();";s:11:"description";s:59:"Returns a short summary for the current formatter settings.";}s:11:"prepareView";a:3:{s:4:"name";s:11:"prepareView";s:11:"declaration";s:51:"public function prepareView(array $entities_items);";s:11:"description";s:71:"Allows formatters to load information for field values being displayed.";}s:4:"view";a:3:{s:4:"name";s:4:"view";s:11:"declaration";s:70:"public function view(FieldItemListInterface $items, $langcode = NULL);";s:11:"description";s:51:"Builds a renderable array for a fully themed field.";}s:12:"viewElements";a:3:{s:4:"name";s:12:"viewElements";s:11:"declaration";s:71:"public function viewElements(FieldItemListInterface $items, $langcode);";s:11:"description";s:44:"Builds a renderable array for a field value.";}s:12:"isApplicable";a:3:{s:4:"name";s:12:"isApplicable";s:11:"declaration";s:80:"public static function isApplicable(FieldDefinitionInterface $field_definition);";s:11:"description";s:60:"Returns if the formatter can be used for the provided field.";}s:15:"defaultSettings";a:3:{s:4:"name";s:15:"defaultSettings";s:11:"declaration";s:41:"public static function defaultSettings();";s:11:"description";s:45:"Defines the default settings for this plugin.";}s:11:"getSettings";a:3:{s:4:"name";s:11:"getSettings";s:11:"declaration";s:30:"public function getSettings();";s:11:"description";s:71:"Returns the array of settings, including defaults for missing settings.";}s:10:"getSetting";a:3:{s:4:"name";s:10:"getSetting";s:11:"declaration";s:33:"public function getSetting($key);";s:11:"description";s:63:"Returns the value of a setting, or its default value if absent.";}s:11:"setSettings";a:3:{s:4:"name";s:11:"setSettings";s:11:"declaration";s:45:"public function setSettings(array $settings);";s:11:"description";s:33:"Sets the settings for the plugin.";}s:10:"setSetting";a:3:{s:4:"name";s:10:"setSetting";s:11:"declaration";s:41:"public function setSetting($key, $value);";s:11:"description";s:43:"Sets the value of a setting for the plugin.";}s:19:"onDependencyRemoval";a:3:{s:4:"name";s:19:"onDependencyRemoval";s:11:"declaration";s:57:"public function onDependencyRemoval(array $dependencies);";s:11:"description";s:73:"Informs the plugin that some configuration it depends on will be deleted.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:20:"setThirdPartySetting";a:3:{s:4:"name";s:20:"setThirdPartySetting";s:11:"declaration";s:60:"public function setThirdPartySetting($module, $key, $value);";s:11:"description";s:40:"Sets the value of a third-party setting.";}s:20:"getThirdPartySetting";a:3:{s:4:"name";s:20:"getThirdPartySetting";s:11:"declaration";s:69:"public function getThirdPartySetting($module, $key, $default = NULL);";s:11:"description";s:40:"Gets the value of a third-party setting.";}s:21:"getThirdPartySettings";a:3:{s:4:"name";s:21:"getThirdPartySettings";s:11:"declaration";s:47:"public function getThirdPartySettings($module);";s:11:"description";s:48:"Gets all third-party settings of a given module.";}s:22:"unsetThirdPartySetting";a:3:{s:4:"name";s:22:"unsetThirdPartySetting";s:11:"declaration";s:54:"public function unsetThirdPartySetting($module, $key);";s:11:"description";s:29:"Unsets a third-party setting.";}s:22:"getThirdPartyProviders";a:3:{s:4:"name";s:22:"getThirdPartyProviders";s:11:"declaration";s:41:"public function getThirdPartyProviders();";s:11:"description";s:54:"Gets the list of third parties that store information.";}}s:17:"plugin_properties";a:6:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:46:"The human-readable name of the formatter type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:42:"A short description of the formatter type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"class";a:3:{s:4:"name";s:5:"class";s:11:"description";s:38:"The name of the field formatter class.";s:4:"type";s:6:"string";}s:11:"field_types";a:3:{s:4:"name";s:11:"field_types";s:11:"description";s:47:"An array of field types the formatter supports.";s:4:"type";s:5:"array";}s:6:"weight";a:3:{s:4:"name";s:6:"weight";s:11:"description";s:70:"An integer to determine the weight of this formatter relative to other";s:4:"type";s:12:"int optional";}}}s:12:"field.widget";a:8:{s:7:"type_id";s:12:"field.widget";s:10:"type_label";s:12:"field.widget";s:10:"service_id";s:27:"plugin.manager.field.widget";s:6:"subdir";s:24:"Plugin/Field/FieldWidget";s:16:"plugin_interface";s:33:"Drupal\Core\Field\WidgetInterface";s:33:"plugin_definition_annotation_name";s:40:"Drupal\Core\Field\Annotation\FieldWidget";s:24:"plugin_interface_methods";a:24:{s:12:"settingsForm";a:3:{s:4:"name";s:12:"settingsForm";s:11:"declaration";s:74:"public function settingsForm(array $form, FormStateInterface $form_state);";s:11:"description";s:52:"Returns a form to configure settings for the widget.";}s:15:"settingsSummary";a:3:{s:4:"name";s:15:"settingsSummary";s:11:"declaration";s:34:"public function settingsSummary();";s:11:"description";s:56:"Returns a short summary for the current widget settings.";}s:11:"formElement";a:3:{s:4:"name";s:11:"formElement";s:11:"declaration";s:129:"public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state);";s:11:"description";s:43:"Returns the form for a single field widget.";}s:12:"errorElement";a:3:{s:4:"name";s:12:"errorElement";s:11:"declaration";s:131:"public function errorElement(array $element, ConstraintViolationInterface $violation, array $form, FormStateInterface $form_state);";s:11:"description";s:71:"Assigns a field-level validation error to the right widget sub-element.";}s:17:"massageFormValues";a:3:{s:4:"name";s:17:"massageFormValues";s:11:"declaration";s:94:"public function massageFormValues(array $values, array $form, FormStateInterface $form_state);";s:11:"description";s:67:"Massages the form values into the format expected for field values.";}s:12:"isApplicable";a:3:{s:4:"name";s:12:"isApplicable";s:11:"declaration";s:80:"public static function isApplicable(FieldDefinitionInterface $field_definition);";s:11:"description";s:57:"Returns if the widget can be used for the provided field.";}s:4:"form";a:3:{s:4:"name";s:4:"form";s:11:"declaration";s:117:"public function form(FieldItemListInterface $items, array &$form, FormStateInterface $form_state, $get_delta = NULL);";s:11:"description";s:35:"Creates a form element for a field.";}s:17:"extractFormValues";a:3:{s:4:"name";s:17:"extractFormValues";s:11:"declaration";s:110:"public function extractFormValues(FieldItemListInterface $items, array $form, FormStateInterface $form_state);";s:11:"description";s:49:"Extracts field values from submitted form values.";}s:10:"flagErrors";a:3:{s:4:"name";s:10:"flagErrors";s:11:"declaration";s:149:"public function flagErrors(FieldItemListInterface $items, ConstraintViolationListInterface $violations, array $form, FormStateInterface $form_state);";s:11:"description";s:67:"Reports field-level validation errors against actual form elements.";}s:14:"getWidgetState";a:3:{s:4:"name";s:14:"getWidgetState";s:11:"declaration";s:99:"public static function getWidgetState(array $parents, $field_name, FormStateInterface $form_state);";s:11:"description";s:67:"Retrieves processing information about the widget from $form_state.";}s:14:"setWidgetState";a:3:{s:4:"name";s:14:"setWidgetState";s:11:"declaration";s:119:"public static function setWidgetState(array $parents, $field_name, FormStateInterface $form_state, array $field_state);";s:11:"description";s:62:"Stores processing information about the widget in $form_state.";}s:15:"defaultSettings";a:3:{s:4:"name";s:15:"defaultSettings";s:11:"declaration";s:41:"public static function defaultSettings();";s:11:"description";s:45:"Defines the default settings for this plugin.";}s:11:"getSettings";a:3:{s:4:"name";s:11:"getSettings";s:11:"declaration";s:30:"public function getSettings();";s:11:"description";s:71:"Returns the array of settings, including defaults for missing settings.";}s:10:"getSetting";a:3:{s:4:"name";s:10:"getSetting";s:11:"declaration";s:33:"public function getSetting($key);";s:11:"description";s:63:"Returns the value of a setting, or its default value if absent.";}s:11:"setSettings";a:3:{s:4:"name";s:11:"setSettings";s:11:"declaration";s:45:"public function setSettings(array $settings);";s:11:"description";s:33:"Sets the settings for the plugin.";}s:10:"setSetting";a:3:{s:4:"name";s:10:"setSetting";s:11:"declaration";s:41:"public function setSetting($key, $value);";s:11:"description";s:43:"Sets the value of a setting for the plugin.";}s:19:"onDependencyRemoval";a:3:{s:4:"name";s:19:"onDependencyRemoval";s:11:"declaration";s:57:"public function onDependencyRemoval(array $dependencies);";s:11:"description";s:73:"Informs the plugin that some configuration it depends on will be deleted.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:20:"setThirdPartySetting";a:3:{s:4:"name";s:20:"setThirdPartySetting";s:11:"declaration";s:60:"public function setThirdPartySetting($module, $key, $value);";s:11:"description";s:40:"Sets the value of a third-party setting.";}s:20:"getThirdPartySetting";a:3:{s:4:"name";s:20:"getThirdPartySetting";s:11:"declaration";s:69:"public function getThirdPartySetting($module, $key, $default = NULL);";s:11:"description";s:40:"Gets the value of a third-party setting.";}s:21:"getThirdPartySettings";a:3:{s:4:"name";s:21:"getThirdPartySettings";s:11:"declaration";s:47:"public function getThirdPartySettings($module);";s:11:"description";s:48:"Gets all third-party settings of a given module.";}s:22:"unsetThirdPartySetting";a:3:{s:4:"name";s:22:"unsetThirdPartySetting";s:11:"declaration";s:54:"public function unsetThirdPartySetting($module, $key);";s:11:"description";s:29:"Unsets a third-party setting.";}s:22:"getThirdPartyProviders";a:3:{s:4:"name";s:22:"getThirdPartyProviders";s:11:"declaration";s:41:"public function getThirdPartyProviders();";s:11:"description";s:54:"Gets the list of third parties that store information.";}}s:17:"plugin_properties";a:7:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:43:"The human-readable name of the widget type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:39:"A short description of the widget type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"class";a:3:{s:4:"name";s:5:"class";s:11:"description";s:29:"The name of the widget class.";s:4:"type";s:6:"string";}s:11:"field_types";a:3:{s:4:"name";s:11:"field_types";s:11:"description";s:44:"An array of field types the widget supports.";s:4:"type";s:5:"array";}s:15:"multiple_values";a:3:{s:4:"name";s:15:"multiple_values";s:11:"description";s:54:"Does the field widget handles multiple values at once.";s:4:"type";s:4:"bool";}s:6:"weight";a:3:{s:4:"name";s:6:"weight";s:11:"description";s:75:"An integer to determine the weight of this widget relative to other widgets";s:4:"type";s:12:"int optional";}}}s:6:"filter";a:8:{s:7:"type_id";s:6:"filter";s:10:"type_label";s:6:"filter";s:10:"service_id";s:21:"plugin.manager.filter";s:6:"subdir";s:13:"Plugin/Filter";s:16:"plugin_interface";s:36:"Drupal\filter\Plugin\FilterInterface";s:33:"plugin_definition_annotation_name";s:31:"Drupal\filter\Annotation\Filter";s:24:"plugin_interface_methods";a:14:{s:7:"getType";a:3:{s:4:"name";s:7:"getType";s:11:"declaration";s:26:"public function getType();";s:11:"description";s:50:"Returns the processing type of this filter plugin.";}s:8:"getLabel";a:3:{s:4:"name";s:8:"getLabel";s:11:"declaration";s:27:"public function getLabel();";s:11:"description";s:56:"Returns the administrative label for this filter plugin.";}s:14:"getDescription";a:3:{s:4:"name";s:14:"getDescription";s:11:"declaration";s:33:"public function getDescription();";s:11:"description";s:62:"Returns the administrative description for this filter plugin.";}s:12:"settingsForm";a:3:{s:4:"name";s:12:"settingsForm";s:11:"declaration";s:74:"public function settingsForm(array $form, FormStateInterface $form_state);";s:11:"description";s:35:"Generates a filter's settings form.";}s:7:"prepare";a:3:{s:4:"name";s:7:"prepare";s:11:"declaration";s:42:"public function prepare($text, $langcode);";s:11:"description";s:33:"Prepares the text for processing.";}s:7:"process";a:3:{s:4:"name";s:7:"process";s:11:"declaration";s:42:"public function process($text, $langcode);";s:11:"description";s:31:"Performs the filter processing.";}s:19:"getHTMLRestrictions";a:3:{s:4:"name";s:19:"getHTMLRestrictions";s:11:"declaration";s:38:"public function getHTMLRestrictions();";s:11:"description";s:52:"Returns HTML allowed by this filter's configuration.";}s:4:"tips";a:3:{s:4:"name";s:4:"tips";s:11:"declaration";s:36:"public function tips($long = FALSE);";s:11:"description";s:25:"Generates a filter's tip.";}s:16:"getConfiguration";a:3:{s:4:"name";s:16:"getConfiguration";s:11:"declaration";s:35:"public function getConfiguration();";s:11:"description";s:33:"Gets this plugin's configuration.";}s:16:"setConfiguration";a:3:{s:4:"name";s:16:"setConfiguration";s:11:"declaration";s:55:"public function setConfiguration(array $configuration);";s:11:"description";s:48:"Sets the configuration for this plugin instance.";}s:20:"defaultConfiguration";a:3:{s:4:"name";s:20:"defaultConfiguration";s:11:"declaration";s:39:"public function defaultConfiguration();";s:11:"description";s:43:"Gets default configuration for this plugin.";}s:21:"calculateDependencies";a:3:{s:4:"name";s:21:"calculateDependencies";s:11:"declaration";s:40:"public function calculateDependencies();";s:11:"description";s:50:"Calculates dependencies for the configured plugin.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}}s:17:"plugin_properties";a:7:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:8:"provider";a:3:{s:4:"name";s:8:"provider";s:11:"description";s:46:"The name of the provider that owns the filter.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The human-readable name of the filter.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:66:"Additional administrative information about the filter's behavior.";s:4:"type";s:46:"\Drupal\Core\Annotation\Translation (optional)";}s:6:"weight";a:3:{s:4:"name";s:6:"weight";s:11:"description";s:52:"A default weight for the filter in new text formats.";s:4:"type";s:14:"int (optional)";}s:6:"status";a:3:{s:4:"name";s:6:"status";s:11:"description";s:54:"Whether this filter is enabled or disabled by default.";s:4:"type";s:15:"bool (optional)";}s:8:"settings";a:3:{s:4:"name";s:8:"settings";s:11:"description";s:36:"The default settings for the filter.";s:4:"type";s:16:"array (optional)";}}}s:12:"help_section";a:8:{s:7:"type_id";s:12:"help_section";s:10:"type_label";s:12:"help_section";s:10:"service_id";s:27:"plugin.manager.help_section";s:6:"subdir";s:18:"Plugin/HelpSection";s:16:"plugin_interface";s:38:"Drupal\help\HelpSectionPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\help\Annotation\HelpSection";s:24:"plugin_interface_methods";a:8:{s:8:"getTitle";a:3:{s:4:"name";s:8:"getTitle";s:11:"declaration";s:27:"public function getTitle();";s:11:"description";s:38:"Returns the title of the help section.";}s:14:"getDescription";a:3:{s:4:"name";s:14:"getDescription";s:11:"declaration";s:33:"public function getDescription();";s:11:"description";s:50:"Returns the description text for the help section.";}s:10:"listTopics";a:3:{s:4:"name";s:10:"listTopics";s:11:"declaration";s:29:"public function listTopics();";s:11:"description";s:53:"Returns a list of topics to show in the help section.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:16:"getCacheContexts";a:3:{s:4:"name";s:16:"getCacheContexts";s:11:"declaration";s:35:"public function getCacheContexts();";s:11:"description";s:47:"The cache contexts associated with this object.";}s:12:"getCacheTags";a:3:{s:4:"name";s:12:"getCacheTags";s:11:"declaration";s:31:"public function getCacheTags();";s:11:"description";s:43:"The cache tags associated with this object.";}s:14:"getCacheMaxAge";a:3:{s:4:"name";s:14:"getCacheMaxAge";s:11:"declaration";s:33:"public function getCacheMaxAge();";s:11:"description";s:52:"The maximum age for which this object may be cached.";}}s:17:"plugin_properties";a:4:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:54:"The text to use as the title of the help page section.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:41:"The description of the help page section.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:10:"permission";a:3:{s:4:"name";s:10:"permission";s:11:"description";s:58:"The (optional) permission needed to view the help section.";s:4:"type";s:6:"string";}}}s:12:"image.effect";a:8:{s:7:"type_id";s:12:"image.effect";s:10:"type_label";s:12:"image.effect";s:10:"service_id";s:27:"plugin.manager.image.effect";s:6:"subdir";s:18:"Plugin/ImageEffect";s:16:"plugin_interface";s:33:"Drupal\image\ImageEffectInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\image\Annotation\ImageEffect";s:24:"plugin_interface_methods";a:14:{s:11:"applyEffect";a:3:{s:4:"name";s:11:"applyEffect";s:11:"declaration";s:51:"public function applyEffect(ImageInterface $image);";s:11:"description";s:44:"Applies an image effect to the image object.";}s:19:"transformDimensions";a:3:{s:4:"name";s:19:"transformDimensions";s:11:"declaration";s:62:"public function transformDimensions(array &$dimensions, $uri);";s:11:"description";s:46:"Determines the dimensions of the styled image.";}s:22:"getDerivativeExtension";a:3:{s:4:"name";s:22:"getDerivativeExtension";s:11:"declaration";s:51:"public function getDerivativeExtension($extension);";s:11:"description";s:72:"Returns the extension the derivative would have have after applying this";}s:10:"getSummary";a:3:{s:4:"name";s:10:"getSummary";s:11:"declaration";s:29:"public function getSummary();";s:11:"description";s:73:"Returns a render array summarizing the configuration of the image effect.";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"declaration";s:24:"public function label();";s:11:"description";s:31:"Returns the image effect label.";}s:7:"getUuid";a:3:{s:4:"name";s:7:"getUuid";s:11:"declaration";s:26:"public function getUuid();";s:11:"description";s:52:"Returns the unique ID representing the image effect.";}s:9:"getWeight";a:3:{s:4:"name";s:9:"getWeight";s:11:"declaration";s:28:"public function getWeight();";s:11:"description";s:39:"Returns the weight of the image effect.";}s:9:"setWeight";a:3:{s:4:"name";s:9:"setWeight";s:11:"declaration";s:35:"public function setWeight($weight);";s:11:"description";s:38:"Sets the weight for this image effect.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:16:"getConfiguration";a:3:{s:4:"name";s:16:"getConfiguration";s:11:"declaration";s:35:"public function getConfiguration();";s:11:"description";s:33:"Gets this plugin's configuration.";}s:16:"setConfiguration";a:3:{s:4:"name";s:16:"setConfiguration";s:11:"declaration";s:55:"public function setConfiguration(array $configuration);";s:11:"description";s:48:"Sets the configuration for this plugin instance.";}s:20:"defaultConfiguration";a:3:{s:4:"name";s:20:"defaultConfiguration";s:11:"declaration";s:39:"public function defaultConfiguration();";s:11:"description";s:43:"Gets default configuration for this plugin.";}s:21:"calculateDependencies";a:3:{s:4:"name";s:21:"calculateDependencies";s:11:"declaration";s:40:"public function calculateDependencies();";s:11:"description";s:50:"Calculates dependencies for the configured plugin.";}}s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:44:"The human-readable name of the image effect.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:40:"A brief description of the image effect.";s:4:"type";s:46:"\Drupal\Core\Annotation\Translation (optional)";}}}s:4:"mail";a:8:{s:7:"type_id";s:4:"mail";s:10:"type_label";s:4:"mail";s:10:"service_id";s:19:"plugin.manager.mail";s:6:"subdir";s:11:"Plugin/Mail";s:16:"plugin_interface";s:30:"Drupal\Core\Mail\MailInterface";s:33:"plugin_definition_annotation_name";s:27:"Drupal\Core\Annotation\Mail";s:24:"plugin_interface_methods";a:2:{s:6:"format";a:3:{s:4:"name";s:6:"format";s:11:"declaration";s:39:"public function format(array $message);";s:11:"description";s:35:"Formats a message prior to sending.";}s:4:"mail";a:3:{s:4:"name";s:4:"mail";s:11:"declaration";s:37:"public function mail(array $message);";s:11:"description";s:75:"Sends a message composed by \Drupal\Core\Mail\MailManagerInterface->mail().";}}s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:43:"The human-readable name of the mail plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:39:"A short description of the mail plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}}s:20:"menu.contextual_link";a:8:{s:7:"type_id";s:20:"menu.contextual_link";s:10:"type_label";s:20:"menu.contextual_link";s:10:"service_id";s:35:"plugin.manager.menu.contextual_link";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:24:"plugin_interface_methods";a:0:{}s:17:"plugin_properties";a:0:{}}s:9:"menu.link";a:8:{s:7:"type_id";s:9:"menu.link";s:10:"type_label";s:9:"menu.link";s:10:"service_id";s:24:"plugin.manager.menu.link";s:6:"subdir";s:0:"";s:16:"plugin_interface";s:0:"";s:33:"plugin_definition_annotation_name";s:0:"";s:24:"plugin_interface_methods";a:0:{}s:17:"plugin_properties";a:0:{}}s:17:"menu.local_action";a:8:{s:7:"type_id";s:17:"menu.local_action";s:10:"type_label";s:17:"menu.local_action";s:10:"service_id";s:32:"plugin.manager.menu.local_action";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:24:"plugin_interface_methods";a:0:{}s:17:"plugin_properties";a:0:{}}s:15:"menu.local_task";a:8:{s:7:"type_id";s:15:"menu.local_task";s:10:"type_label";s:15:"menu.local_task";s:10:"service_id";s:30:"plugin.manager.menu.local_task";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:24:"plugin_interface_methods";a:0:{}s:17:"plugin_properties";a:0:{}}s:12:"queue_worker";a:8:{s:7:"type_id";s:12:"queue_worker";s:10:"type_label";s:12:"queue_worker";s:10:"service_id";s:27:"plugin.manager.queue_worker";s:6:"subdir";s:18:"Plugin/QueueWorker";s:16:"plugin_interface";s:38:"Drupal\Core\Queue\QueueWorkerInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\Core\Annotation\QueueWorker";s:24:"plugin_interface_methods";a:3:{s:11:"processItem";a:3:{s:4:"name";s:11:"processItem";s:11:"declaration";s:35:"public function processItem($data);";s:11:"description";s:29:"Works on a single queue item.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}}s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:39:"The human-readable title of the plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"cron";a:3:{s:4:"name";s:4:"cron";s:11:"description";s:49:"An associative array containing the optional key:";s:4:"type";s:16:"array (optional)";}}}s:16:"quickedit.editor";a:8:{s:7:"type_id";s:16:"quickedit.editor";s:10:"type_label";s:16:"quickedit.editor";s:10:"service_id";s:31:"plugin.manager.quickedit.editor";s:6:"subdir";s:20:"Plugin/InPlaceEditor";s:16:"plugin_interface";s:46:"Drupal\quickedit\Plugin\InPlaceEditorInterface";s:33:"plugin_definition_annotation_name";s:41:"Drupal\quickedit\Annotation\InPlaceEditor";s:24:"plugin_interface_methods";a:5:{s:12:"isCompatible";a:3:{s:4:"name";s:12:"isCompatible";s:11:"declaration";s:60:"public function isCompatible(FieldItemListInterface $items);";s:11:"description";s:69:"Checks whether this in-place editor is compatible with a given field.";}s:11:"getMetadata";a:3:{s:4:"name";s:11:"getMetadata";s:11:"declaration";s:59:"public function getMetadata(FieldItemListInterface $items);";s:11:"description";s:63:"Generates metadata that is needed specifically for this editor.";}s:14:"getAttachments";a:3:{s:4:"name";s:14:"getAttachments";s:11:"declaration";s:33:"public function getAttachments();";s:11:"description";s:40:"Returns the attachments for this editor.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}}s:17:"plugin_properties";a:2:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:6:"module";a:3:{s:4:"name";s:6:"module";s:11:"description";s:60:"The name of the module providing the in-place editor plugin.";s:4:"type";s:6:"string";}}}s:6:"search";a:8:{s:7:"type_id";s:6:"search";s:10:"type_label";s:6:"search";s:10:"service_id";s:21:"plugin.manager.search";s:6:"subdir";s:13:"Plugin/Search";s:16:"plugin_interface";s:36:"Drupal\search\Plugin\SearchInterface";s:33:"plugin_definition_annotation_name";s:37:"Drupal\search\Annotation\SearchPlugin";s:24:"plugin_interface_methods";a:14:{s:9:"setSearch";a:3:{s:4:"name";s:9:"setSearch";s:11:"declaration";s:75:"public function setSearch($keywords, array $parameters, array $attributes);";s:11:"description";s:70:"Sets the keywords, parameters, and attributes to be used by execute().";}s:11:"getKeywords";a:3:{s:4:"name";s:11:"getKeywords";s:11:"declaration";s:30:"public function getKeywords();";s:11:"description";s:58:"Returns the currently set keywords of the plugin instance.";}s:13:"getParameters";a:3:{s:4:"name";s:13:"getParameters";s:11:"declaration";s:32:"public function getParameters();";s:11:"description";s:53:"Returns the current parameters set using setSearch().";}s:13:"getAttributes";a:3:{s:4:"name";s:13:"getAttributes";s:11:"declaration";s:32:"public function getAttributes();";s:11:"description";s:56:"Returns the currently set attributes (from the request).";}s:18:"isSearchExecutable";a:3:{s:4:"name";s:18:"isSearchExecutable";s:11:"declaration";s:37:"public function isSearchExecutable();";s:11:"description";s:68:"Verifies if the values set via setSearch() are valid and sufficient.";}s:7:"getType";a:3:{s:4:"name";s:7:"getType";s:11:"declaration";s:26:"public function getType();";s:11:"description";s:47:"Returns the search index type this plugin uses.";}s:7:"execute";a:3:{s:4:"name";s:7:"execute";s:11:"declaration";s:26:"public function execute();";s:11:"description";s:20:"Executes the search.";}s:12:"buildResults";a:3:{s:4:"name";s:12:"buildResults";s:11:"declaration";s:31:"public function buildResults();";s:11:"description";s:66:"Executes the search and builds render arrays for the result items.";}s:14:"suggestedTitle";a:3:{s:4:"name";s:14:"suggestedTitle";s:11:"declaration";s:33:"public function suggestedTitle();";s:11:"description";s:56:"Provides a suggested title for a page of search results.";}s:7:"getHelp";a:3:{s:4:"name";s:7:"getHelp";s:11:"declaration";s:26:"public function getHelp();";s:11:"description";s:27:"Returns the searching help.";}s:15:"searchFormAlter";a:3:{s:4:"name";s:15:"searchFormAlter";s:11:"declaration";s:78:"public function searchFormAlter(array &$form, FormStateInterface $form_state);";s:11:"description";s:59:"Alters the search form when being built for a given plugin.";}s:19:"buildSearchUrlQuery";a:3:{s:4:"name";s:19:"buildSearchUrlQuery";s:11:"declaration";s:68:"public function buildSearchUrlQuery(FormStateInterface $form_state);";s:11:"description";s:53:"Builds the URL GET query parameters array for search.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}}s:17:"plugin_properties";a:2:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:42:"A unique identifier for the search plugin.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:34:"The title for the search page tab.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}}s:8:"tour.tip";a:8:{s:7:"type_id";s:8:"tour.tip";s:10:"type_label";s:8:"tour.tip";s:10:"service_id";s:23:"plugin.manager.tour.tip";s:6:"subdir";s:15:"Plugin/tour/tip";s:16:"plugin_interface";s:30:"Drupal\tour\TipPluginInterface";s:33:"plugin_definition_annotation_name";s:26:"Drupal\tour\Annotation\Tip";s:24:"plugin_interface_methods";a:7:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"declaration";s:21:"public function id();";s:11:"description";s:22:"Returns id of the tip.";}s:8:"getLabel";a:3:{s:4:"name";s:8:"getLabel";s:11:"declaration";s:27:"public function getLabel();";s:11:"description";s:25:"Returns label of the tip.";}s:9:"getWeight";a:3:{s:4:"name";s:9:"getWeight";s:11:"declaration";s:28:"public function getWeight();";s:11:"description";s:26:"Returns weight of the tip.";}s:13:"getAttributes";a:3:{s:4:"name";s:13:"getAttributes";s:11:"declaration";s:32:"public function getAttributes();";s:11:"description";s:51:"Returns an array of attributes for the tip wrapper.";}s:3:"get";a:3:{s:4:"name";s:3:"get";s:11:"declaration";s:26:"public function get($key);";s:11:"description";s:33:"Used for returning values by key.";}s:3:"set";a:3:{s:4:"name";s:3:"set";s:11:"declaration";s:34:"public function set($key, $value);";s:11:"description";s:33:"Used for returning values by key.";}s:9:"getOutput";a:3:{s:4:"name";s:9:"getOutput";s:11:"declaration";s:28:"public function getOutput();";s:11:"description";s:27:"Returns a renderable array.";}}s:17:"plugin_properties";a:2:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:24:"The title of the plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}}s:12:"views.access";a:8:{s:7:"type_id";s:12:"views.access";s:10:"type_label";s:12:"views.access";s:10:"service_id";s:27:"plugin.manager.views.access";s:6:"subdir";s:19:"Plugin/views/access";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\views\Annotation\ViewsAccess";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:8:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:56:"The base tables on which this access plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:10:"views.area";a:8:{s:7:"type_id";s:10:"views.area";s:10:"type_label";s:10:"views.area";s:10:"service_id";s:25:"plugin.manager.views.area";s:6:"subdir";s:17:"Plugin/views/area";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:33:"Drupal\views\Annotation\ViewsArea";s:24:"plugin_interface_methods";a:39:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:50:"public function access(AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:71:"public function showExposeForm(&$form, FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}}s:14:"views.argument";a:8:{s:7:"type_id";s:14:"views.argument";s:10:"type_label";s:14:"views.argument";s:10:"service_id";s:29:"plugin.manager.views.argument";s:6:"subdir";s:21:"Plugin/views/argument";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:37:"Drupal\views\Annotation\ViewsArgument";s:24:"plugin_interface_methods";a:39:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:50:"public function access(AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:71:"public function showExposeForm(&$form, FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}}s:22:"views.argument_default";a:8:{s:7:"type_id";s:22:"views.argument_default";s:10:"type_label";s:22:"views.argument_default";s:10:"service_id";s:37:"plugin.manager.views.argument_default";s:6:"subdir";s:29:"Plugin/views/argument_default";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:44:"Drupal\views\Annotation\ViewsArgumentDefault";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:24:"views.argument_validator";a:8:{s:7:"type_id";s:24:"views.argument_validator";s:10:"type_label";s:24:"views.argument_validator";s:10:"service_id";s:39:"plugin.manager.views.argument_validator";s:6:"subdir";s:31:"Plugin/views/argument_validator";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:46:"Drupal\views\Annotation\ViewsArgumentValidator";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:11:"views.cache";a:8:{s:7:"type_id";s:11:"views.cache";s:10:"type_label";s:11:"views.cache";s:10:"service_id";s:26:"plugin.manager.views.cache";s:6:"subdir";s:18:"Plugin/views/cache";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsCache";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:8:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:55:"The base tables on which this cache plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:13:"views.display";a:8:{s:7:"type_id";s:13:"views.display";s:10:"type_label";s:13:"views.display";s:10:"service_id";s:28:"plugin.manager.views.display";s:6:"subdir";s:20:"Plugin/views/display";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:36:"Drupal\views\Annotation\ViewsDisplay";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:14:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"admin";a:3:{s:4:"name";s:5:"admin";s:11:"description";s:39:"The administrative name of the display.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:15:"uses_menu_links";a:3:{s:4:"name";s:15:"uses_menu_links";s:11:"description";s:54:"Whether or not to use hook_menu() to register a route.";s:4:"type";s:4:"bool";}s:10:"uses_route";a:3:{s:4:"name";s:10:"uses_route";s:11:"description";s:54:"Does the display plugin registers routes to the route.";s:4:"type";s:4:"bool";}s:15:"uses_hook_block";a:3:{s:4:"name";s:15:"uses_hook_block";s:11:"description";s:39:"Does the display plugin provide blocks.";s:4:"type";s:4:"bool";}s:26:"contextual_links_locations";a:3:{s:4:"name";s:26:"contextual_links_locations";s:11:"description";s:56:"A list of places where contextual links should be added.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:57:"The base tables on which this display plugin can be used.";s:4:"type";s:5:"array";}s:5:"theme";a:2:{s:4:"name";s:5:"theme";s:11:"description";s:55:"The theme function used to render the display's output.";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:16:"returns_response";a:3:{s:4:"name";s:16:"returns_response";s:11:"description";s:46:"Whether the display returns a response object.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:22:"views.display_extender";a:8:{s:7:"type_id";s:22:"views.display_extender";s:10:"type_label";s:22:"views.display_extender";s:10:"service_id";s:37:"plugin.manager.views.display_extender";s:6:"subdir";s:29:"Plugin/views/display_extender";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:44:"Drupal\views\Annotation\ViewsDisplayExtender";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:6:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:50:"Whether or not the plugin is selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:18:"views.exposed_form";a:8:{s:7:"type_id";s:18:"views.exposed_form";s:10:"type_label";s:18:"views.exposed_form";s:10:"service_id";s:33:"plugin.manager.views.exposed_form";s:6:"subdir";s:25:"Plugin/views/exposed_form";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:40:"Drupal\views\Annotation\ViewsExposedForm";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:8:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:62:"The base tables on which this exposed form plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:11:"views.field";a:8:{s:7:"type_id";s:11:"views.field";s:10:"type_label";s:11:"views.field";s:10:"service_id";s:26:"plugin.manager.views.field";s:6:"subdir";s:18:"Plugin/views/field";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsField";s:24:"plugin_interface_methods";a:39:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:50:"public function access(AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:71:"public function showExposeForm(&$form, FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}}s:12:"views.filter";a:8:{s:7:"type_id";s:12:"views.filter";s:10:"type_label";s:12:"views.filter";s:10:"service_id";s:27:"plugin.manager.views.filter";s:6:"subdir";s:19:"Plugin/views/filter";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\views\Annotation\ViewsFilter";s:24:"plugin_interface_methods";a:39:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:50:"public function access(AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:71:"public function showExposeForm(&$form, FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}}s:10:"views.join";a:8:{s:7:"type_id";s:10:"views.join";s:10:"type_label";s:10:"views.join";s:10:"service_id";s:25:"plugin.manager.views.join";s:6:"subdir";s:17:"Plugin/views/join";s:16:"plugin_interface";s:50:"Drupal\views\Plugin\views\join\JoinPluginInterface";s:33:"plugin_definition_annotation_name";s:33:"Drupal\views\Annotation\ViewsJoin";s:24:"plugin_interface_methods";a:1:{s:9:"buildJoin";a:3:{s:4:"name";s:9:"buildJoin";s:11:"declaration";s:62:"public function buildJoin($select_query, $table, $view_query);";s:11:"description";s:51:"Builds the SQL for the join this object represents.";}}s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}}s:11:"views.pager";a:8:{s:7:"type_id";s:11:"views.pager";s:10:"type_label";s:11:"views.pager";s:10:"service_id";s:26:"plugin.manager.views.pager";s:6:"subdir";s:18:"Plugin/views/pager";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsPager";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:9:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"theme";a:2:{s:4:"name";s:5:"theme";s:11:"description";s:53:"The theme function used to render the pager's output.";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:55:"The base tables on which this pager plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:11:"views.query";a:8:{s:7:"type_id";s:11:"views.query";s:10:"type_label";s:11:"views.query";s:10:"service_id";s:26:"plugin.manager.views.query";s:6:"subdir";s:18:"Plugin/views/query";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsQuery";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:6:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:18:"views.relationship";a:8:{s:7:"type_id";s:18:"views.relationship";s:10:"type_label";s:18:"views.relationship";s:10:"service_id";s:33:"plugin.manager.views.relationship";s:6:"subdir";s:25:"Plugin/views/relationship";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:41:"Drupal\views\Annotation\ViewsRelationship";s:24:"plugin_interface_methods";a:39:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:50:"public function access(AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:71:"public function showExposeForm(&$form, FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}}s:9:"views.row";a:8:{s:7:"type_id";s:9:"views.row";s:10:"type_label";s:9:"views.row";s:10:"service_id";s:24:"plugin.manager.views.row";s:6:"subdir";s:16:"Plugin/views/row";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:32:"Drupal\views\Annotation\ViewsRow";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:9:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"theme";a:2:{s:4:"name";s:5:"theme";s:11:"description";s:49:"The theme function used to render the row output.";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:53:"The base tables on which this row plugin can be used.";s:4:"type";s:5:"array";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:10:"views.sort";a:8:{s:7:"type_id";s:10:"views.sort";s:10:"type_label";s:10:"views.sort";s:10:"service_id";s:25:"plugin.manager.views.sort";s:6:"subdir";s:17:"Plugin/views/sort";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:33:"Drupal\views\Annotation\ViewsSort";s:24:"plugin_interface_methods";a:39:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:50:"public function access(AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:71:"public function showExposeForm(&$form, FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}}s:11:"views.style";a:8:{s:7:"type_id";s:11:"views.style";s:10:"type_label";s:11:"views.style";s:10:"service_id";s:26:"plugin.manager.views.style";s:6:"subdir";s:18:"Plugin/views/style";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsStyle";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:9:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"theme";a:3:{s:4:"name";s:5:"theme";s:11:"description";s:51:"The theme function used to render the style output.";s:4:"type";s:6:"string";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:55:"The base tables on which this style plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}s:12:"views.wizard";a:8:{s:7:"type_id";s:12:"views.wizard";s:10:"type_label";s:12:"views.wizard";s:10:"service_id";s:27:"plugin.manager.views.wizard";s:6:"subdir";s:19:"Plugin/views/wizard";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\views\Annotation\ViewsWizard";s:24:"plugin_interface_methods";a:24:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:76:"public function validateOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:115:"public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:95:"public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:74:"public function submitOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:72:"public function globalTokenForm(&$form, FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:84:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = array());";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:75:"public function globalTokenReplace($string = '', array $options = array());";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:73:"public function buildOptionsForm(&$form, FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}s:11:"getPluginId";a:3:{s:4:"name";s:11:"getPluginId";s:11:"declaration";s:30:"public function getPluginId();";s:11:"description";s:42:"Gets the plugin_id of the plugin instance.";}s:19:"getPluginDefinition";a:3:{s:4:"name";s:19:"getPluginDefinition";s:11:"declaration";s:38:"public function getPluginDefinition();";s:11:"description";s:49:"Gets the definition of the plugin implementation.";}s:9:"getBaseId";a:3:{s:4:"name";s:9:"getBaseId";s:11:"declaration";s:28:"public function getBaseId();";s:11:"description";s:47:"Gets the base_plugin_id of the plugin instance.";}s:15:"getDerivativeId";a:3:{s:4:"name";s:15:"getDerivativeId";s:11:"declaration";s:34:"public function getDerivativeId();";s:11:"description";s:46:"Gets the derivative_id of the plugin instance.";}}s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:10:"base_table";a:3:{s:4:"name";s:10:"base_table";s:11:"description";s:45:"The base tables on which this wizard is used.";s:4:"type";s:5:"array";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:15:"bool (optional)";}}}}